Pass Engine Torque (percent) and Engine Speed (rpm)
	-Clutch: y=0.014(rpm)-20.7
	-Find closest point to left of clutch torque line
	-Find first point to the right of the clutch torque line
	-Use y1-y2=m(x1-x2) to get slope of line, make line, call "engine torque line"
	-Find intercept of engine torque line and clutch torque line
Return (Torque, Power, BSFC)

http://docs.sympy.org/latest/modules/solvers/solvers.html
http://docs.sympy.org/latest/modules/functions/elementary.html
https://gr-framework.org/tutorials/using_gr.html

.Eli {
	import numpy as np
	a = np.array([[3,1], [1,2]])
	b = np.array([9,8])
	x = np.linalg.solve(a, b)	
}
.Josiah {
	def intercept(engTorque, rpm):
		get[x, y] array from rpm[torque100%];
		clutchTorque = .014(rpm)-20.7;
		while (engTorque <= clutchTorque):
			clutchTorque = .014(rpm)-20.7;
		if(clutchTorque == engTorque):
			use engTorque[x, y];
		else:
			find intercept of two lines;
		return intecept point; //array[x,y]
} .Josiah(cont) {
	if(clutchTorque < engineTorque):
		not there yet;
	if(clutchTorque == engineTorque):
		use clutchTorque[x,y];
	if(clutchTorque > engineTorque):
		find intercept[x,y];
}

	[Torque, Power, BSFC]
RPM	100% Throttle:
1400 	[0.00, 0.00, 431.0345]
1500	[1.53, 0.24, 43.1034]
1600	[2.88, 0.48, 4.3103]
1700	[4.06, 0.72, 0.4310]
1800	[5.11, 0.96, 0.2155]
1900	[6.05, 1.20, 0.2155]
2000	[6.90, 1.45, 0.1437]
2100	[7.00, 1.54, 0.1197]
2200	[7.08, 1.63, 0.1197]
2300	[7.16, 1.72, 0.1078]
2400	[7.23, 1.82, 0.0958]
2500	[7.30, 1.91, 0.0862]
2600	[7.30, 1.99, 0.0647]
2700	[7.30, 2.06, 0.0862]
2800	[7.30, 2.14, 0.0958]
2900	[7.30, 2.22, 0.0958]
3000	[7.30, 2.29, 0.0958]
3100	[7.22, 2.34, 0.1078]
3200	[7.15, 2.40, 0.1078]
3300	[7.08, 2.45, 0.1197]
3400	[7.02, 2.50, 0.1197]
3500	[6.95, 2.55, 0.1437]
3600	[6.90, 2.60, 0.1437]